CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(UHDF5)

FIND_PACKAGE(HDF5)
IF (HDF5_IS_PARALLEL)
    FIND_PACKAGE(MPI)
ENDIF()

MESSAGE("${HDF5_LIBRARIES}")

INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIRS})
IF (HDF5_IS_PARALLEL)
    INCLUDE_DIRECTORIES (${MPI_CXX_INCLUDE_PATH})
    SET(HDF5LIBS "${HDF5_LIBRARIES}" "${MPI_CXX_LIBRARIES}")
ELSE()
    SET(HDF5LIBS "${HDF5_LIBRARIES}")
ENDIF()

SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++11")

INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIRS})
INCLUDE_DIRECTORIES (${MPI_CXX_INCLUDE_PATH})

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}")

#ADD_LIBRARY(uhdf5 "uhdf5.cpp")
ADD_LIBRARY(uhdf5 SHARED "uhdf5.cpp")

ADD_EXECUTABLE(t_uhdf5 "t_uhdf5.cpp")
TARGET_LINK_LIBRARIES(t_uhdf5 uhdf5 ${HDF5LIBS})

ADD_EXECUTABLE(t_integer_types "t_integer_types.cpp")
TARGET_LINK_LIBRARIES(t_integer_types uhdf5 ${HDF5LIBS})

ADD_EXECUTABLE(t_create_open_close "t_create_open_close.cpp")
TARGET_LINK_LIBRARIES(t_create_open_close uhdf5 ${HDF5LIBS})

INSTALL(TARGETS 
    uhdf5
    t_uhdf5
    t_create_open_close 
    t_integer_types    
    DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})
